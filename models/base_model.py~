#!/usr/bin/python3
"""
Base model that defines base class BaseModel.
"""

from datetime import datetime
from models import storage
import uuid


class BaseModel():
    """
    Base class which defines common attributes and methods for other classes.
    """
    def __init__(self, *args, **kwargs):
        """
        instantiate model
        """

        DATE_TIME_FORMAT = '%Y-%m-%dT%H:%M:%S.%f'
        if kwargs:
            for key in ("updated_at", "created_at"):
                self.__dict__[key] = datetime.strptime(value, DATE_TIME_FORMAT)
        elif key[0] == "id":
            self.__dict__[key] = str(value)
        elif key != "__class__":
            self.__dict__[key] = value
        else:
            self.id = str(uuid())
            self.created_at = datetime.now()
            self.updated_at = datetime.now()
            storage.new(self)


    def __str__(self):
        """
        Returns objects string representation
        """
        return "[{}] ({}) {}".format(type(self.__name__, self.id, self.__dict__))

    def save(self):
        """
        updates public instance attr updated_at to current time
        """
        self.updated_at = datetime.now()
        storage.save()

    def to_dict(self):
        """
        Returns all key/vals of __dict__ instance as a dictionary
        """
        obj_dict = self.__dict__.copy()
        obj_dict['__class__'] = type(self).__name__
        obj_dict['created_at'] = obj_dict['created_at'].isoformat()
        obj_dict['updated_at'] = obj_dict['updated_at'].isoformat()
        return obj_dict
